function featureVector = extractFeatures(x)
%extractFeatures Extract multiple features from batch audio
%   featureVector = extractFeatures(audioIn) returns audio features
%   extracted from audioIn.
%
%   Parameters of the audioFeatureExtractor used to generate this
%   function must be honored when calling this function.
%    - Sample rate of the input should be 8000 Hz.
%
%
%      % EXAMPLE 1: Extract features
%        source = dsp.ColoredNoise("SamplesPerFrame",8000);
%        for ii = 1:10
%            audioIn = source();
%            featureArray = extractFeatures(audioIn);
%            % ... do something with featureArray ...
%        end
%
%
%      % EXAMPLE 2: Generate code
%        targetDataType = "single";
%        codegen extractFeatures -args {ones(8000,1,targetDataType)}
%        source = dsp.ColoredNoise("SamplesPerFrame",8000, ...
%                                  "OutputDataType",targetDataType);
%        for ii = 1:10
%            audioIn = source();
%            featureArray = extractFeatures_mex(audioIn);
%            % ... do something with featureArray ...
%        end
%
%   See also audioFeatureExtractor, dsp.AsyncBuffer, codegen.

%   Generated by audioFeatureExtractor on 7-Jun-2021 14:29:17 +0100
%#codegen
x = double(x);
dataType = class(x);
[numSamples,numChannels] = size(x);

props = coder.const(getProps(dataType));

persistent config outputIndex
if isempty(config)
    [config, outputIndex] = coder.const(@getConfig,dataType,props);
end

% Preallocate feature vector
numHops = floor((numSamples-numel(props.Window))/(numel(props.Window) - props.OverlapLength)) + 1;
featureVector = coder.nullcopy(zeros(numHops,props.NumFeatures,numChannels,dataType));

% Short-time Fourier transform
Y = stft(x,"Window",props.Window,"OverlapLength",props.OverlapLength,"FFTLength",props.FFTLength,"FrequencyRange","onesided");
Z = reshape(Y,[],numHops*numChannels);
Zpower = real(Z.*conj(Z));

% Bark spectrum
barkSpectrum = reshape(config.barkSpectrum.FilterBank*Zpower,[],numHops,numChannels);
featureVector(:,outputIndex.barkSpectrum,:) = permute(barkSpectrum,[2,1,3]);
end

function props = getProps(dataType)
props.Window = cast([0;0.00024671981713419999238112723105587;0.00098663578586422051586168890935369;0.0022190176984600018528226428315975;0.0039426493427610620479129011073383;0.0061558297024311148248898462043144;0.008856374635655639426801144509227;0.012041619030626282693674511392601;0.015708419435684461973323777783662;0.019853157161528467433697642263724;0.024471741852423234409030783353955;0.029559615522887272565100147403427;0.035111757055874270871953513051267;0.0411226871580094299751806374843;0.047586473766990267098009326218744;0.054496737905816050595575461557019;0.06184665997806820803006644382549;0.069628986498028178075969663041178;0.077836037248992462345142939739162;0.086459712862719084736085051190457;0.095491502812526274368565282202326;0.10492249381215479342444041321869;0.11474337861210537337086634579464;0.12494446518477025920290657268197;0.13551568628929422377638047692017;0.14644660940672621363134453531529;0.15772644703565563695235596242128;0.16934406733817408685638383758487;0.18128800512565518276986153978214;0.19354647317351170165977691794978;0.20610737385376343144827160358545;0.21895831107393470826849579680129;0.23208660251050172718123576487415;0.24547929212481439664728100069624;0.25912316294914239378499587473925;0.27300475013022657000405502003559;0.28711035421746367024553592273151;0.3014260546826097453276815940626;0.31593772365766092935501774263685;0.33063103987735426025906804170518;0.34549150281252627436856528220233;0.36050444698038525137562260169943;0.37565505641757251931167616021412;0.39092837930172863458722076757113;0.40630934270713764400184686564899;0.42178276747988452388682389937458;0.43733338321784787083856826939154;0.45294584334074272646830650046468;0.4686047402353432644872555101756;0.4842946204609357985226836262882;0.49999999999999994448884876874217;0.51570537953906414596616514245397;0.5313952597646567355127444898244;0.54705415665925716250939103701967;0.56266661678215212916143173060846;0.57821723252011547611317610062542;0.59369065729286241150930436560884;0.60907162069827114336817430739757;0.6243449435824273141548701460124;0.63949555301961458209092370452709;0.65450849718747372563143471779767;0.669368960122645684229780727037;0.6840622763423389596226797948475;0.6985739453173902546723184059374;0.71288964578253632975446407726849;0.72699524986977337448479374870658;0.7408768370508577172373065877764;0.75452070787518565886387023056159;0.76791339748949849486336916015716;0.78104168892606518070920174068306;0.79389262614623645752942593389889;0.80645352682648807629561815701891;0.81871199487434487274128969147569;0.83065593266182591314361616241513;0.84227355296434436304764403757872;0.85355339059327373085750423342688;0.86448431371070566520131706056418;0.87505553481522979630824465857586;0.88525662138789451560683119168971;0.89507750618784520657555958678131;0.90450849718747372563143471779767;0.91354028713728097077506618006737;0.92216396275100742663255459774518;0.93037101350197182192403033695882;0.93815334002193173645878232491668;0.94550326209418389389327330718515;0.95241352623300967739083944252343;0.95887731284199051451366813125787;0.96488824294412567361689525569091;0.9704403844771127829460510838544;0.97552825814757682110212044790387;0.98014684283847153256630235773628;0.98429158056431553802667622221634;0.9879583809693737173063254886074;0.99114362536434430506204762423295;0.99384417029756888517511015379569;0.99605735065723888244093586763483;0.9977809823015399981471773571684;0.99901336421413577948413831109065;0.99975328018286580000761887276894;1;0.99975328018286580000761887276894;0.99901336421413577948413831109065;0.9977809823015399981471773571684;0.99605735065723888244093586763483;0.99384417029756888517511015379569;0.99114362536434430506204762423295;0.9879583809693737173063254886074;0.98429158056431553802667622221634;0.98014684283847153256630235773628;0.97552825814757682110212044790387;0.9704403844771127829460510838544;0.96488824294412567361689525569091;0.95887731284199051451366813125787;0.95241352623300967739083944252343;0.94550326209418389389327330718515;0.93815334002193173645878232491668;0.93037101350197182192403033695882;0.92216396275100742663255459774518;0.91354028713728097077506618006737;0.90450849718747372563143471779767;0.89507750618784520657555958678131;0.88525662138789451560683119168971;0.87505553481522979630824465857586;0.86448431371070566520131706056418;0.85355339059327373085750423342688;0.84227355296434436304764403757872;0.83065593266182591314361616241513;0.81871199487434487274128969147569;0.80645352682648807629561815701891;0.79389262614623645752942593389889;0.78104168892606518070920174068306;0.76791339748949849486336916015716;0.75452070787518565886387023056159;0.7408768370508577172373065877764;0.72699524986977337448479374870658;0.71288964578253632975446407726849;0.6985739453173902546723184059374;0.6840622763423389596226797948475;0.669368960122645684229780727037;0.65450849718747372563143471779767;0.63949555301961458209092370452709;0.6243449435824273141548701460124;0.60907162069827114336817430739757;0.59369065729286241150930436560884;0.57821723252011547611317610062542;0.56266661678215212916143173060846;0.54705415665925716250939103701967;0.5313952597646567355127444898244;0.51570537953906414596616514245397;0.49999999999999994448884876874217;0.4842946204609357985226836262882;0.4686047402353432644872555101756;0.45294584334074272646830650046468;0.43733338321784787083856826939154;0.42178276747988452388682389937458;0.40630934270713764400184686564899;0.39092837930172863458722076757113;0.37565505641757251931167616021412;0.36050444698038525137562260169943;0.34549150281252627436856528220233;0.33063103987735426025906804170518;0.31593772365766092935501774263685;0.3014260546826097453276815940626;0.28711035421746367024553592273151;0.27300475013022657000405502003559;0.25912316294914239378499587473925;0.24547929212481439664728100069624;0.23208660251050172718123576487415;0.21895831107393470826849579680129;0.20610737385376343144827160358545;0.19354647317351170165977691794978;0.18128800512565518276986153978214;0.16934406733817408685638383758487;0.15772644703565563695235596242128;0.14644660940672621363134453531529;0.13551568628929422377638047692017;0.12494446518477025920290657268197;0.11474337861210537337086634579464;0.10492249381215479342444041321869;0.095491502812526274368565282202326;0.086459712862719084736085051190457;0.077836037248992462345142939739162;0.069628986498028178075969663041178;0.06184665997806820803006644382549;0.054496737905816050595575461557019;0.047586473766990267098009326218744;0.0411226871580094299751806374843;0.035111757055874270871953513051267;0.029559615522887272565100147403427;0.024471741852423234409030783353955;0.019853157161528467433697642263724;0.015708419435684461973323777783662;0.012041619030626282693674511392601;0.008856374635655639426801144509227;0.0061558297024311148248898462043144;0.0039426493427610620479129011073383;0.0022190176984600018528226428315975;0.00098663578586422051586168890935369;0.00024671981713419999238112723105587],dataType);
props.OverlapLength = cast(120,dataType);
props.SampleRate = cast(8000,dataType);
props.FFTLength = uint16(2048);
props.NumFeatures = uint8(50);
end

function [config, outputIndex] = getConfig(dataType, props)

barkFilterbank = designAuditoryFilterBank(props.SampleRate, ...
    "FrequencyScale","bark", ...
    "FFTLength",props.FFTLength, ...
    "OneSided",true, ...
    "FrequencyRange",[0 4000], ...
    "NumBands",50, ...
    "Normalization","bandwidth", ...
    "FilterBankDesignDomain","linear");
config.barkSpectrum.FilterBank = cast(barkFilterbank,dataType);

outputIndex.barkSpectrum = uint8(1:50);
end
